generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Client {
  id              String   @id @default(cuid())
  name            String
  document        String?  @unique
  contactName     String?
  contactEmail    String?
  contactPhone    String?
  whatsappNumber  String?
  createdAt       DateTime @default(now())

  sectors         Sector[]
  users           SystemUser[]
  linenItems      LinenItem[]
  stockMovements  StockMovement[]
  weighingControls WeighingControl[]
  distributedItems DistributedItem[]
}

model Sector {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())

  clientId    String?
  client      Client?  @relation(fields: [clientId], references: [id])

  beds        Bed[]
}

model Bed {
  id        String  @id @default(cuid())
  number    String
  status    String  @default("free") // 'free' | 'occupied'
  token     String  @unique

  sectorId  String
  sector    Sector  @relation(fields: [sectorId], references: [id])

  orders    Order[]
  distributedItems DistributedItem[]
}

model LinenItem {
  id            String   @id @default(cuid())
  name          String
  sku           String   @unique
  unit          String
  currentStock  Int      @default(0)
  minimumStock  Int      @default(0)
  createdAt     DateTime @default(now())
  clientId      String?
  client        Client?  @relation(fields: [clientId], references: [id])

  stockMovements StockMovement[]
  orderItems     OrderItem[]
  distributedItems DistributedItem[]
}

model OrderItem {
  id       String   @id @default(cuid())
  itemId   String
  item     LinenItem @relation(fields: [itemId], references: [id])
  quantity Int

  orderId  String
  order    Order    @relation(fields: [orderId], references: [id])
}

model Order {
  id          String   @id @default(cuid())
  bedId       String
  bed         Bed      @relation(fields: [bedId], references: [id])
  status      String   @default("pending") // 'pending' | 'preparing' | 'delivered' | 'cancelled'
  observations String?
  scheduledDelivery DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  items       OrderItem[]

  deliveredAt       DateTime?
  deliveredByUserId String?
  receiverName      String?
  confirmationType  String?   // 'signature' | 'photo'
  confirmationUrl   String?
}

model StockMovement {
  id        String   @id @default(cuid())
  itemId    String
  item      LinenItem @relation(fields: [itemId], references: [id])
  type      String   // 'in' | 'out'
  quantity  Int
  orderId   String?
  reason    String
  createdAt DateTime @default(now())
  clientId  String?
  client    Client?  @relation(fields: [clientId], references: [id])
}

model SystemUser {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  role      String   // 'admin' | 'manager'
  passwordHash String
  createdAt DateTime @default(now())

  clientId  String?
  client    Client?  @relation(fields: [clientId], references: [id])
}


// Laundry Weighing - Cages (Gaiolas)
model Cage {
  id         String   @id @default(cuid())
  barcode    String   @unique
  tareWeight Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())

  entries    WeighingEntry[]
}

// Laundry Weighing - Control header
model WeighingControl {
  id                   String   @id @default(cuid())
  clientId             String?
  client               Client?  @relation(fields: [clientId], references: [id])
  laundryGrossWeight   Decimal  @db.Decimal(10, 2)
  clientTotalNetWeight Decimal  @default(0) @db.Decimal(10, 2)
  differenceWeight     Decimal  @default(0) @db.Decimal(10, 2)
  differencePercent    Decimal  @default(0) @db.Decimal(5, 2)
  kind                 String   @default("limpa") // 'suja' | 'limpa'
  referenceDate        DateTime @default(now())   // data de referência (dia)
  expectedDeliveryDate DateTime?                  // suja: data prevista de entrega
  status               String   @default("open")  // 'open' | 'closed'
  closedAt             DateTime?
  createdAt            DateTime @default(now())

  entries              WeighingEntry[]
}

// Items allocated to beds (enxoval distribuído)
model DistributedItem {
  id           String   @id @default(cuid())
  linenItemId  String
  bedId        String
  allocatedAt  DateTime @default(now())
  status       String   // 'allocated' | 'pendingCollection' | 'collected'
  orderId      String?
  clientId     String?

  linenItem    LinenItem @relation(fields: [linenItemId], references: [id])
  bed          Bed       @relation(fields: [bedId], references: [id])
  client       Client?   @relation(fields: [clientId], references: [id])
}

// Laundry Weighing - Individual entries
model WeighingEntry {
  id          String   @id @default(cuid())
  controlId   String
  control     WeighingControl @relation(fields: [controlId], references: [id])

  cageId      String?
  cage        Cage?    @relation(fields: [cageId], references: [id])

  tareWeight  Decimal  @db.Decimal(10, 2)
  totalWeight Decimal  @db.Decimal(10, 2)
  netWeight   Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
}

